function [cet, width] = gdsii_pathtext(str, pos, height, ang, pwidth, ptype, ext, layer, dtype)
%function [cet, width] = gdsii_pathtext(str, pos, height, ang, pwidth, ptype, ext, layer, dtype)
%
% gdsii_pathtext : renders a text with characters using path elements
%
% INPUT:
% str   :  string to be drawn. The string can contain ASCII characters
%          33 to 126 and spaces (ASCII 32). char(127) encodes a lower
%          case Greek mu.
% pos   :  position where the text is drawn in user coordinates
% height:  height of the character box in user coordinates
% ang   :  (Optional) rotate text by angle 'ang' around the bottom
%          left corner of the textbox. 'ang' must be in degrees. Default 0.
% pwidth : (Optional) path width when characters are rendered as paths.
%          Default is 1/12 (12%) of the height.
% ptype :  (Optional) path type to be used (see 'gds_element' constructor).
%          Options are 0,1,2,4. Default is 0. 
%          Only used for path elements.
% ext :    (Optional) a structure with path extensions for path type 4.
%                ext.beg : extension at the beginning of the path
%                ext.end : extension at the end.
%          Default: ext = struct('beg',0,'end',0);
% layer :  (Optional) layer on which to draw the string. Default is 1.
% dtype :  (Optional) data type. Default is 0.
%
% OUTPUT:
% cet   :  Compound gds_element object with the input text string rendered 
%          as paths.
% width :  (Optional) Width of the string in the same units as the height
%          argument (needed e.g. for centering the string, etc.).
%
% ASCII table
%
% Char  Dec  Oct  Hex | Char  Dec  Oct  Hex | Char Dec  Oct   Hex
%----------------------------------------------------------------
% (sp)   32 0040 0x20 | @      64 0100 0x40 | `      96 0140 0x60
% !      33 0041 0x21 | A      65 0101 0x41 | a      97 0141 0x61
% "      34 0042 0x22 | B      66 0102 0x42 | b      98 0142 0x62
% #      35 0043 0x23 | C      67 0103 0x43 | c      99 0143 0x63
% $      36 0044 0x24 | D      68 0104 0x44 | d     100 0144 0x64
% %      37 0045 0x25 | E      69 0105 0x45 | e     101 0145 0x65
% &      38 0046 0x26 | F      70 0106 0x46 | f     102 0146 0x66
% '      39 0047 0x27 | G      71 0107 0x47 | g     103 0147 0x67
% (      40 0050 0x28 | H      72 0110 0x48 | h     104 0150 0x68
% )      41 0051 0x29 | I      73 0111 0x49 | i     105 0151 0x69
% *      42 0052 0x2a | J      74 0112 0x4a | j     106 0152 0x6a
% +      43 0053 0x2b | K      75 0113 0x4b | k     107 0153 0x6b
% ,      44 0054 0x2c | L      76 0114 0x4c | l     108 0154 0x6c
% -      45 0055 0x2d | M      77 0115 0x4d | m     109 0155 0x6d
% .      46 0056 0x2e | N      78 0116 0x4e | n     110 0156 0x6e
% /      47 0057 0x2f | O      79 0117 0x4f | o     111 0157 0x6f
% 0      48 0060 0x30 | P      80 0120 0x50 | p     112 0160 0x70
% 1      49 0061 0x31 | Q      81 0121 0x51 | q     113 0161 0x71
% 2      50 0062 0x32 | R      82 0122 0x52 | r     114 0162 0x72
% 3      51 0063 0x33 | S      83 0123 0x53 | s     115 0163 0x73
% 4      52 0064 0x34 | T      84 0124 0x54 | t     116 0164 0x74
% 5      53 0065 0x35 | U      85 0125 0x55 | u     117 0165 0x75
% 6      54 0066 0x36 | V      86 0126 0x56 | v     118 0166 0x76
% 7      55 0067 0x37 | W      87 0127 0x57 | w     119 0167 0x77
% 8      56 0070 0x38 | X      88 0130 0x58 | x     120 0170 0x78
% 9      57 0071 0x39 | Y      89 0131 0x59 | y     121 0171 0x79
% :      58 0072 0x3a | Z      90 0132 0x5a | z     122 0172 0x7a
% ;      59 0073 0x3b | [      91 0133 0x5b | {     123 0173 0x7b
% <      60 0074 0x3c | \      92 0134 0x5c | |     124 0174 0x7c
% =      61 0075 0x3d | ]      93 0135 0x5d | }     125 0175 0x7d
% >      62 0076 0x3e | ^      94 0136 0x5e | ~     126 0176 0x7e
% ?      63 0077 0x3f | _      95 0137 0x5f | \mu   127 0177 0x7f (greek mu)

% initial version: Ulf Griesmann, May 2015

    persistent gdsii_fst;   % symbol table

    % check arguments
    if nargin < 9, dtype = []; end
    if nargin < 8, layer = []; end
    if nargin < 7, ext = []; end
    if nargin < 6, ptype = []; end
    if nargin < 5, pwidth = []; end 
    if nargin < 4, ang = []; end
    if nargin < 3
        error('gdsii_pathtext: at least three input arguments are required.');
    end
    
    % fill in default argument values
    if isempty(ptype), ptype = 0; end
    if isempty(pwidth), pwidth = 0.12*height; end
    if isempty(ext), ext = struct('beg',0,'end',0); end
    if isempty(layer), layer = 1; end
    if isempty(dtype), dtype = 0; end
    if isempty(ang), ang = 0; end;
    ang = pi*ang/180;            % radians needed below

    % load table of glyphs (re-load symbols when type changes)
    if isempty(gdsii_fst)
        gdsii_fst = path_glyph_table;
    end

    % draw the string
    cpos = pos;                  % current position
    lwid = 0;                    % width of the string
    vdir = [cos(ang), sin(ang)]; % direction of text
    lbl = {};                    % local list of boundaries

    for k=1:length(str)
  
        nc = double(str(k));       % character ASCII index
  
        if nc > 32 && nc <= 127
            if iscell(gdsii_fst(nc).gly)
                for m = 1:length(gdsii_fst(nc).gly)
                     xy = gdsii_fst(nc).gly{m};
                     glypt = height * poly_rotz(xy, ang) + ...
                             repmat(cpos,length(xy),1);
                     lbl{end+1} = glypt;% add to list of boundaries
                end
            else
                glypt = height * poly_rotz(gdsii_fst(nc).gly, ang) + ...
                        repmat(cpos,length(gdsii_fst(nc).gly),1);
                lbl{end+1} = glypt;     % add to list of boundaries
            end
     
            % advance position
            dpos = vdir * height * (gdsii_fst(nc).wid);
            lwid = lwid + norm(dpos , 2);
            cpos = cpos + dpos;
  
        elseif nc == 32            % it's a space
                                   % advance position by 80% of height
            dpos = vdir * height * 0.8;
            cpos = cpos + dpos;
            lwid = lwid + norm(dpos , 2);
            continue
  
        else
            error(sprintf('character >>> %c <<< is not supported.', str(k)));
        end
    end

    % return the data
    cet = gds_element('path', 'xy',lbl, 'layer',layer, 'dtype',dtype, ...
                      'width',pwidth, 'ptype',ptype, 'ext',ext);
    width = lwid;

end


% --------------------------------
%
function [L] = path_glyph_table
% Table with glyphs for the 1-stroke path font. The glyphs are
% taken from the Hershey Roman Simplex (1-stroke) font.
% The Hershey Fonts were originally created by Dr. A. V. Hershey 
% while working at the U. S. National Bureau of Standards (now NIST).
%
% Every symbol consists of a glyph, a cell array of nx2 matrices containing
% path vertics, and the width of the symbol. The height of all symbols is scaled to 1. 
%
% Indices:
% ASCII characters from 32 to 126 and 127 for Greek mu
%
% Returns:
% L{k}.gly : n x 2 matrix of points (one per row) which describe
%            a glyph or a cell array of n x 2 matrices when the
%            glyph consists of more than one polygon
% L{k}.wid : width of symbol when height is normalized to 1
% L{k}.ind : indentation of symbol in the character box
%
% Ulf Griesmann, May 2015

    % pre-allocate
    L = repmat(struct('gly',[], 'wid',0), 127, 1);

    % glyph list
    L(33).gly = {[5,21;5,7]/21,[5,2;4,1;5,0;6,1;5,2]/21};
    L(34).gly = {[4,21;4,14]/21,[12,21;12,14]/21};
    L(35).gly = {[11,25;4,-7]/21,[17,25;10,-7]/21,[4,12;18,12]/21,[3,6;17,6]/21};
    L(36).gly = {[8,25;8,-4]/21,[12,25;12,-4]/21,[17,18;15,20;12,21;8,21;5,20;3,18;3,16;4,14;5,13;7,12;13,10;15,9;16,8;17,6;17,3;15,1;12,0;8,0;5,1;3,3]/21};
    L(37).gly = {[21,21;3,0]/21,[8,21;10,19;10,17;9,15;7,14;5,14;3,16;3,18;4,20;6,21;8,21;10,20;13,19;16,19;19,20;21,21]/21,[17,7;15,6;14,4;14,2;16,0;18,0;20,1;21,3;21,5;19,7;17,7]/21};
    L(38).gly = {[23,12;23,13;22,14;21,14;20,13;19,11;17,6;15,3;13,1;11,0;7,0;5,1;4,2;3,4;3,6;4,8;5,9;12,13;13,14;14,16;14,18;13,20;11,21;9,20;8,18;8,16;9,13;11,10;16,3;18,1;20,0;22,0;23,1;23,2]/21};
    L(39).gly = {[5,19;4,20;5,21;6,20;6,18;5,16;4,15]/21};
    L(40).gly = {[11,25;9,23;7,20;5,16;4,11;4,7;5,2;7,-2;9,-5;11,-7]/21};
    L(41).gly = {[3,25;5,23;7,20;9,16;10,11;10,7;9,2;7,-2;5,-5;3,-7]/21};
    L(42).gly = {[8,21;8,9]/21,[3,18;13,12]/21,[13,18;3,12]/21};
    L(43).gly = {[13,18;13,0]/21,[4,9;22,9]/21};
    L(44).gly = {[6,1;5,0;4,1;5,2;6,1;6,-1;5,-3;4,-4]/21};
    L(45).gly = {[4,9;22,9]/21};
    L(46).gly = {[5,2;4,1;5,0;6,1;5,2]/21};
    L(47).gly = {[20,25;2,-7]/21};
    L(48).gly = {[9,21;6,20;4,17;3,12;3,9;4,4;6,1;9,0;11,0;14,1;16,4;17,9;17,12;16,17;14,20;11,21;9,21]/21};
    L(49).gly = {[6,17;8,18;11,21;11,0]/21};
    L(50).gly = {[4,16;4,17;5,19;6,20;8,21;12,21;14,20;15,19;16,17;16,15;15,13;13,10;3,0;17,0]/21};
    L(51).gly = {[5,21;16,21;10,13;13,13;15,12;16,11;17,8;17,6;16,3;14,1;11,0;8,0;5,1;4,2;3,4]/21};
    L(52).gly = {[13,21;3,7;18,7]/21,[13,21;13,0]/21};
    L(53).gly = {[15,21;5,21;4,12;5,13;8,14;11,14;14,13;16,11;17,8;17,6;16,3;14,1;11,0;8,0;5,1;4,2;3,4]/21};
    L(54).gly = {[16,18;15,20;12,21;10,21;7,20;5,17;4,12;4,7;5,3;7,1;10,0;11,0;14,1;16,3;17,6;17,7;16,10;14,12;11,13;10,13;7,12;5,10;4,7]/21};
    L(55).gly = {[17,21;7,0]/21,[3,21;17,21]/21};
    L(56).gly = {[8,21;5,20;4,18;4,16;5,14;7,13;11,12;14,11;16,9;17,7;17,4;16,2;15,1;12,0;8,0;5,1;4,2;3,4;3,7;4,9;6,11;9,12;13,13;15,14;16,16;16,18;15,20;12,21;8,21]/21};
    L(57).gly = {[16,14;15,11;13,9;10,8;9,8;6,9;4,11;3,14;3,15;4,18;6,20;9,21;10,21;13,20;15,18;16,14;16,9;15,4;13,1;10,0;8,0;5,1;4,3]/21};
    L(58).gly = {[5,14;4,13;5,12;6,13;5,14]/21,[5,2;4,1;5,0;6,1;5,2]/21};
    L(59).gly = {[5,14;4,13;5,12;6,13;5,14]/21,[6,1;5,0;4,1;5,2;6,1;6,-1;5,-3;4,-4]/21};
    L(60).gly = {[20,18;4,9;20,0]/21};
    L(61).gly = {[4,12;22,12]/21,[4,6;22,6]/21};
    L(62).gly = {[4,18;20,9;4,0]/21};
    L(63).gly = {[3,16;3,17;4,19;5,20;7,21;11,21;13,20;14,19;15,17;15,15;14,13;13,12;9,10;9,7]/21,[9,2;8,1;9,0;10,1;9,2]/21};
    L(64).gly = {[18,13;17,15;15,16;12,16;10,15;9,14;8,11;8,8;9,6;11,5;14,5;16,6;17,8]/21,[12,16;10,14;9,11;9,8;10,6;11,5]/21,[18,16;17,8;17,6;19,5;21,5;23,7;24,10;24,12;23,15;22,17;20,19;18,20;15,21;12,21;9,20;7,19;5,17;4,15;3,12;3,9;4,6;5,4;7,2;9,1;12,0;15,0;18,1;20,2;21,3]/21,[19,16;18,8;18,6;19,5]/21};
    L(65).gly = {[9,21;1,0]/21,[9,21;17,0]/21,[4,7;14,7]/21};
    L(66).gly = {[4,21;4,0]/21,[4,21;13,21;16,20;17,19;18,17;18,15;17,13;16,12;13,11]/21,[4,11;13,11;16,10;17,9;18,7;18,4;17,2;16,1;13,0;4,0]/21};
    L(67).gly = {[18,16;17,18;15,20;13,21;9,21;7,20;5,18;4,16;3,13;3,8;4,5;5,3;7,1;9,0;13,0;15,1;17,3;18,5]/21};
    L(68).gly = {[4,21;4,0]/21,[4,21;11,21;14,20;16,18;17,16;18,13;18,8;17,5;16,3;14,1;11,0;4,0]/21};
    L(69).gly = {[4,21;4,0]/21,[4,21;17,21]/21,[4,11;12,11]/21,[4,0;17,0]/21};
    L(70).gly = {[4,21;4,0]/21,[4,21;17,21]/21,[4,11;12,11]/21};
    L(71).gly = {[18,16;17,18;15,20;13,21;9,21;7,20;5,18;4,16;3,13;3,8;4,5;5,3;7,1;9,0;13,0;15,1;17,3;18,5;18,8]/21,[13,8;18,8]/21};
    L(72).gly = {[4,21;4,0]/21,[18,21;18,0]/21,[4,11;18,11]/21};
    L(73).gly = {[4,21;4,0]/21};
    L(74).gly = {[12,21;12,5;11,2;10,1;8,0;6,0;4,1;3,2;2,5;2,7]/21};
    L(75).gly = {[4,21;4,0]/21,[18,21;4,7]/21,[9,12;18,0]/21};
    L(76).gly = {[4,21;4,0]/21,[4,0;16,0]/21};
    L(77).gly = {[4,21;4,0]/21,[4,21;12,0]/21,[20,21;12,0]/21,[20,21;20,0]/21};
    L(78).gly = {[4,21;4,0]/21,[4,21;18,0]/21,[18,21;18,0]/21};
    L(79).gly = {[9,21;7,20;5,18;4,16;3,13;3,8;4,5;5,3;7,1;9,0;13,0;15,1;17,3;18,5;19,8;19,13;18,16;17,18;15,20;13,21;9,21]/21};
    L(80).gly = {[4,21;4,0]/21,[4,21;13,21;16,20;17,19;18,17;18,14;17,12;16,11;13,10;4,10]/21};
    L(81).gly = {[9,21;7,20;5,18;4,16;3,13;3,8;4,5;5,3;7,1;9,0;13,0;15,1;17,3;18,5;19,8;19,13;18,16;17,18;15,20;13,21;9,21]/21,[12,4;18,-2]/21};
    L(82).gly = {[4,21;4,0]/21,[4,21;13,21;16,20;17,19;18,17;18,15;17,13;16,12;13,11;4,11]/21,[11,11;18,0]/21};
    L(83).gly = {[17,18;15,20;12,21;8,21;5,20;3,18;3,16;4,14;5,13;7,12;13,10;15,9;16,8;17,6;17,3;15,1;12,0;8,0;5,1;3,3]/21};
    L(84).gly = {[8,21;8,0]/21,[1,21;15,21]/21};
    L(85).gly = {[4,21;4,6;5,3;7,1;10,0;12,0;15,1;17,3;18,6;18,21]/21};
    L(86).gly = {[1,21;9,0]/21,[17,21;9,0]/21};
    L(87).gly = {[2,21;7,0]/21,[12,21;7,0]/21,[12,21;17,0]/21,[22,21;17,0]/21};
    L(88).gly = {[3,21;17,0]/21,[17,21;3,0]/21};
    L(89).gly = {[1,21;9,11;9,0]/21,[17,21;9,11]/21};
    L(90).gly = {[17,21;3,0]/21,[3,21;17,21]/21,[3,0;17,0]/21};
    L(91).gly = {[4,25;4,-7]/21,[5,25;5,-7]/21,[4,25;11,25]/21,[4,-7;11,-7]/21};
    L(92).gly = {[0,21;14,-3]/21};
    L(93).gly = {[9,25;9,-7]/21,[10,25;10,-7]/21,[3,25;10,25]/21,[3,-7;10,-7]/21};
    L(94).gly = {[6,15;8,18;10,15]/21,[3,12;8,17;13,12]/21,[8,17;8,0]/21};
    L(95).gly = {[0,-2;16,-2]/21};
    L(96).gly = {[6,21;5,20;4,18;4,16;5,15;6,16;5,17]/21};
    L(97).gly = {[15,14;15,0]/21,[15,11;13,13;11,14;8,14;6,13;4,11;3,8;3,6;4,3;6,1;8,0;11,0;13,1;15,3]/21};
    L(98).gly = {[4,21;4,0]/21,[4,11;6,13;8,14;11,14;13,13;15,11;16,8;16,6;15,3;13,1;11,0;8,0;6,1;4,3]/21};
    L(99).gly = {[15,11;13,13;11,14;8,14;6,13;4,11;3,8;3,6;4,3;6,1;8,0;11,0;13,1;15,3]/21};
    L(100).gly = {[15,21;15,0]/21,[15,11;13,13;11,14;8,14;6,13;4,11;3,8;3,6;4,3;6,1;8,0;11,0;13,1;15,3]/21};
    L(101).gly = {[3,8;15,8;15,10;14,12;13,13;11,14;8,14;6,13;4,11;3,8;3,6;4,3;6,1;8,0;11,0;13,1;15,3]/21};
    L(102).gly = {[10,21;8,21;6,20;5,17;5,0]/21,[2,14;9,14]/21};
    L(103).gly = {[15,14;15,-2;14,-5;13,-6;11,-7;8,-7;6,-6]/21,[15,11;13,13;11,14;8,14;6,13;4,11;3,8;3,6;4,3;6,1;8,0;11,0;13,1;15,3]/21};
    L(104).gly = {[4,21;4,0]/21,[4,10;7,13;9,14;12,14;14,13;15,10;15,0]/21};
    L(105).gly = {[3,21;4,20;5,21;4,22;3,21]/21,[4,14;4,0]/21};
    L(106).gly = {[5,21;6,20;7,21;6,22;5,21]/21,[6,14;6,-3;5,-6;3,-7;1,-7]/21};
    L(107).gly = {[4,21;4,0]/21,[14,14;4,4]/21,[8,8;15,0]/21};
    L(108).gly = {[4,21;4,0]/21};
    L(109).gly = {[4,14;4,0]/21,[4,10;7,13;9,14;12,14;14,13;15,10;15,0]/21,[15,10;18,13;20,14;23,14;25,13;26,10;26,0]/21};
    L(110).gly = {[4,14;4,0]/21,[4,10;7,13;9,14;12,14;14,13;15,10;15,0]/21};
    L(111).gly = {[8,14;6,13;4,11;3,8;3,6;4,3;6,1;8,0;11,0;13,1;15,3;16,6;16,8;15,11;13,13;11,14;8,14]/21};
    L(112).gly = {[4,14;4,-7]/21,[4,11;6,13;8,14;11,14;13,13;15,11;16,8;16,6;15,3;13,1;11,0;8,0;6,1;4,3]/21};
    L(113).gly = {[15,14;15,-7]/21,[15,11;13,13;11,14;8,14;6,13;4,11;3,8;3,6;4,3;6,1;8,0;11,0;13,1;15,3]/21};
    L(114).gly = {[4,14;4,0]/21,[4,8;5,11;7,13;9,14;12,14]/21};
    L(115).gly = {[14,11;13,13;10,14;7,14;4,13;3,11;4,9;6,8;11,7;13,6;14,4;14,3;13,1;10,0;7,0;4,1;3,3]/21};
    L(116).gly = {[5,21;5,4;6,1;8,0;10,0]/21,[2,14;9,14]/21};
    L(117).gly = {[4,14;4,4;5,1;7,0;10,0;12,1;15,4]/21,[15,14;15,0]/21};
    L(118).gly = {[2,14;8,0]/21,[14,14;8,0]/21};
    L(119).gly = {[3,14;7,0]/21,[11,14;7,0]/21,[11,14;15,0]/21,[19,14;15,0]/21};
    L(120).gly = {[3,14;14,0]/21,[14,14;3,0]/21};
    L(121).gly = {[2,14;8,0]/21,[14,14;8,0;6,-4;4,-6;2,-7;1,-7]/21};
    L(122).gly = {[14,14;3,0]/21,[3,14;14,14]/21,[3,0;14,0]/21};
    L(123).gly = {[9,25;7,24;6,23;5,21;5,19;6,17;7,16;8,14;8,12;6,10]/21,[7,24;6,22;6,20;7,18;8,17;9,15;9,13;8,11;4,9;8,7;9,5;9,3;8,1;7,0;6,-2;6,-4;7,-6]/21,[6,8;8,6;8,4;7,2;6,1;5,-1;5,-3;6,-5;7,-6;9,-7]/21};
    L(124).gly = {[4,25;4,-7]/21};
    L(125).gly = {[5,25;7,24;8,23;9,21;9,19;8,17;7,16;6,14;6,12;8,10]/21,[7,24;8,22;8,20;7,18;6,17;5,15;5,13;6,11;10,9;6,7;5,5;5,3;6,1;7,0;8,-2;8,-4;7,-6]/21,[8,8;6,6;6,4;7,2;8,1;9,-1;9,-3;8,-5;7,-6;5,-7]/21};
    L(126).gly = {[3,6;3,8;4,11;6,12;8,12;10,11;14,8;16,7;18,7;20,8;21,10]/21,[3,8;4,10;6,11;8,11;10,10;14,7;16,6;18,6;20,7;21,10;21,12]/21};
    L(127).gly = {[7,15;1,-6]/21,[6,11;5,6;5,3;7,1;9,1;11,2;13,4;15,8]/21, ...
                  [17,15;15,8;14,4;14,2;15,1;17,1;19,3;20,5]/21};

    L(127).wid = 21/21;                    
    L(33).wid = 10/21;
    L(34).wid = 16/21;
    L(35).wid = 21/21;
    L(36).wid = 20/21;
    L(37).wid = 24/21;
    L(38).wid = 26/21;
    L(39).wid = 10/21;
    L(40).wid = 14/21;
    L(41).wid = 14/21;
    L(42).wid = 16/21;
    L(43).wid = 26/21;
    L(44).wid = 10/21;
    L(45).wid = 26/21;
    L(46).wid = 10/21;
    L(47).wid = 22/21;
    L(48).wid = 20/21;
    L(49).wid = 20/21;
    L(50).wid = 20/21;
    L(51).wid = 20/21;
    L(52).wid = 20/21;
    L(53).wid = 20/21;
    L(54).wid = 20/21;
    L(55).wid = 20/21;
    L(56).wid = 20/21;
    L(57).wid = 20/21;
    L(58).wid = 10/21;
    L(59).wid = 10/21;
    L(60).wid = 24/21;
    L(61).wid = 26/21;
    L(62).wid = 24/21;
    L(63).wid = 18/21;
    L(64).wid = 27/21;
    L(65).wid = 18/21;
    L(66).wid = 21/21;
    L(67).wid = 21/21;
    L(68).wid = 21/21;
    L(69).wid = 19/21;
    L(70).wid = 18/21;
    L(71).wid = 21/21;
    L(72).wid = 22/21;
    L(73).wid = 8/21;
    L(74).wid = 16/21;
    L(75).wid = 21/21;
    L(76).wid = 17/21;
    L(77).wid = 24/21;
    L(78).wid = 22/21;
    L(79).wid = 22/21;
    L(80).wid = 21/21;
    L(81).wid = 22/21;
    L(82).wid = 21/21;
    L(83).wid = 20/21;
    L(84).wid = 16/21;
    L(85).wid = 22/21;
    L(86).wid = 18/21;
    L(87).wid = 24/21;
    L(88).wid = 20/21;
    L(89).wid = 18/21;
    L(90).wid = 20/21;
    L(91).wid = 14/21;
    L(92).wid = 14/21;
    L(93).wid = 14/21;
    L(94).wid = 16/21;
    L(95).wid = 16/21;
    L(96).wid = 10/21;
    L(97).wid = 19/21;
    L(98).wid = 19/21;
    L(99).wid = 18/21;
    L(100).wid = 19/21;
    L(101).wid = 18/21;
    L(102).wid = 12/21;
    L(103).wid = 19/21;
    L(104).wid = 19/21;
    L(105).wid = 8/21;
    L(106).wid = 10/21;
    L(107).wid = 17/21;
    L(108).wid = 8/21;
    L(109).wid = 30/21;
    L(110).wid = 19/21;
    L(111).wid = 19/21;
    L(112).wid = 19/21;
    L(113).wid = 19/21;
    L(114).wid = 13/21;
    L(115).wid = 17/21;
    L(116).wid = 12/21;
    L(117).wid = 19/21;
    L(118).wid = 16/21;
    L(119).wid = 22/21;
    L(120).wid = 17/21;
    L(121).wid = 16/21;
    L(122).wid = 17/21;
    L(123).wid = 14/21;
    L(124).wid = 8/21;
    L(125).wid = 14/21;
    L(126).wid = 24/21;

end
